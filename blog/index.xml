<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Encore Technologies - DevOps Blog</title>
    <link>https://encoretechnologies.github.io/blog/</link>
    <description>Recent content in Blog on Encore Technologies - DevOps Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://encoretechnologies.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating Red Hat Enterprise Linux Patching with Ansible (Part 2 0f 2)</title>
      <link>https://encoretechnologies.github.io/blog/2018/06/ansiblepatchingautomation2/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2018/06/ansiblepatchingautomation2/</guid>
      <description>In this second installment of a two-part series, we&amp;rsquo;ll be going over Phase Two, the build out of standard pre- and post-patching automation, and Phase Three, the build out of application-specific pre- and post-patching automation. Click here for Phase One.
Status Report With basic patching and reboots automated, a patching session for application environments without any special pre-patching and post-patching activities was reduced from 20 minutes per server, down to 6 minutes per server.</description>
    </item>
    
    <item>
      <title>Automating Red Hat Enterprise Linux Patching with Ansible (Part 1 of 2)</title>
      <link>https://encoretechnologies.github.io/blog/2018/06/ansiblepatchingautomation/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2018/06/ansiblepatchingautomation/</guid>
      <description>In this first installment of a two-part series, we&amp;rsquo;ll be going over Phase One, the build out of the &amp;ldquo;core&amp;rdquo; patching and reboot functionality on Ansible.
History Around a year ago, we began working with a customer whose Red Hat Enterprise Linux (RHEL) 6 and 7 OS patching process was being conducted manually. This required highly skilled administrators focused solely on patching. Documentation was eschewed in favor of tribal knowledge and manual command entry at the command line presented moderate to high risk during server patching.</description>
    </item>
    
    <item>
      <title>How StackStorm Changed Our Lives</title>
      <link>https://encoretechnologies.github.io/blog/2018/03/stackstorm-changed-our-lives/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2018/03/stackstorm-changed-our-lives/</guid>
      <description>We started playing around with StackStorm about 9 months ago just to try out some new tools. After a few months of playing around we realized that it was much more than a toy and could provide serious benefits to our DevOps team, our organization and to our customers. Before we discuss all of the great things about StackStorm, let&amp;rsquo;s start with a little history.
History When I started at Encore in June of 2016 the team had just started working on an automation platform.</description>
    </item>
    
    <item>
      <title>Implementing 2-Factor Auth For Workflows In StackStorm Using Inquiries</title>
      <link>https://encoretechnologies.github.io/blog/2017/10/stackstorm-inquiries/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2017/10/stackstorm-inquiries/</guid>
      <description>A common request I have seen on the StackStorm Slack Channel is the ability to utilize 2-factor auth before executing a workflow. Users sometimes have very powerful workflows that require extra care, or a second set of eyes before executing. Inquiries are an experimental feature in StackStorm 2.5 (changelog) that allow the workflow to pause and wait for input from a user before proceeding. In this post we&amp;rsquo;re going to use inquiries to secure a workflow execution using Duo 2-factor authentication (2FA).</description>
    </item>
    
    <item>
      <title>Automated Editing and Addition of ServiceNow CIs</title>
      <link>https://encoretechnologies.github.io/blog/2017/10/servicenow-automation/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2017/10/servicenow-automation/</guid>
      <description>The following is a quick tutorial on using the ServiceNow API with python to programatically create and update configuration items. A personal development instance of ServiceNow Jakarta was used for testing the code below.

About the ServiceNow API Servicenow uses a REST Table API that allows users to perform create, read, update and delete operations on existing tables. ServiceNow also provides you with a REST API Explorer that uses information from your instance to provide you with a list of endpoints, methods, and variables that you can use to build and send a REST request.</description>
    </item>
    
    <item>
      <title>Automated addition of VMware Disks and Controllers</title>
      <link>https://encoretechnologies.github.io/blog/2017/10/vmware-disks/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2017/10/vmware-disks/</guid>
      <description>When adding disks to VMware VM using Python we need to use the pyVmomi VMware SOAP API to communicate with vCenter. pyVmomi gives us a lot of very helpful features that take out a lot of the guess work in adding new disks to a VMware VM.
You can install pyVmomi from pip into a virtualenv like the following:
virtualenv ~/vmware source ~/vmware/bin/activate pip install pyvmomi  VMware Connection pyVmomi makes it really easy to connect to the VMware vCenter environment to query information and perform all the necessary tasks needed.</description>
    </item>
    
    <item>
      <title>Automated creation of StackStorm Packs</title>
      <link>https://encoretechnologies.github.io/blog/2017/10/automated-creation-of-stackstorm-packs/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2017/10/automated-creation-of-stackstorm-packs/</guid>
      <description>In StackStorm a pack is logical organization that contains related actions, aliases, policies, rules and sensors. To get a good overview of what a pack is please see the excellent StackStorm Pack documentation.
Most users of StackStorm wish to either integrate with a new system that&amp;rsquo;s not available in the Exchange or use StackStorm to execute custom automation scripts. The way to accomplish this is to create a new Pack.</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://encoretechnologies.github.io/blog/2017/09/intro/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://encoretechnologies.github.io/blog/2017/09/intro/</guid>
      <description>Welcome to the Encore DevOps blog!
We on the DevOps team have been working for about a year and a half building tons of automation solutions for Encore&amp;rsquo;s Managed Services customers. Up until now we haven&amp;rsquo;t had a place to publicly showcase the more technical work that we&amp;rsquo;ve been doing. This blog serves as a new space for our engineers to share their experiences around new and innovating technologies we&amp;rsquo;re exploring.</description>
    </item>
    
  </channel>
</rss>